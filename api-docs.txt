GAME API DOCUMENTATION
====================

Base URL: http://localhost:8000

OVERVIEW
--------
This is a 20x20 grid-based exploration game where players move around a map with different land types.
Each player has a deterministic starting position based on their wallet address + reveal seed.
Players can only see a 3x3 local view centered on their current position.

GAME CONSTRAINTS
----------------
- Each player has a maximum of 12 moves per game
- Each player can mine a maximum of 3 times per game
- Players accumulate score by mining on different land types
- Once moves or mines are exhausted, players cannot perform those actions

SCORING SYSTEM
--------------
Land types have different point values when mined:
- Common land (1): 1 point
- Uncommon land (2): 5 points  
- Rare land (3): 10 points

AUTHENTICATION
--------------
The API uses JWT (JSON Web Token) authentication with Ethereum signature verification.
Players must sign a message with their wallet to get a JWT token that expires in 1 hour.
Protected endpoints require the Authorization header: "Bearer <token>"

LAND TYPES
----------
0 = Depleted land (already mined, 0 points)
1 = Common land (1 point when mined)
2 = Uncommon land (5 points when mined)
3 = Rare land (10 points when mined)
X = Starting position marker

MOVEMENT DIRECTIONS
------------------
Valid directions: north, south, east, west, northeast, northwest, southeast, southwest

API ENDPOINTS
=============

AUTHENTICATION ENDPOINTS
------------------------

1. GET /register
----------------
Get the message that needs to be signed for authentication.

Response:
{
  "success": true,
  "message": "Sign this message to authenticate with the game server.\n\nContract: 0x123...\nNamespace: ScriptGame\nTimestamp: 1234567890\n\nThis signature is valid for 5 minutes.",
  "timestamp": 1234567890,
  "instructions": "Sign this message with your Ethereum wallet to authenticate"
}

2. POST /register
-----------------
Submit the signature to get a JWT token.

Request Body:
{
  "signature": "0x1234567890abcdef...",
  "address": "0x05937Df8ca0636505d92Fd769d303A3D461587ed",
  "timestamp": 1234567890
}

Response (Success):
{
  "success": true,
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "expiresIn": "1h",
  "message": "Authentication successful"
}

Response (Error):
{
  "error": "Invalid signature"
}

PUBLIC ENDPOINTS
----------------

3. GET /status
--------------
Get overall game status and server info.

Response:
{
  "success": true,
  "gameLoaded": true,
  "mapSize": 20,
  "totalPlayers": 2,
  "players": ["0x05937Df8ca0636505d92Fd769d303A3D461587ed", "0x1a39C55e6333025A3Be3768873C846632ACDb6f5"],
  "revealSeed": "0x5d1fea4f13119a5c07e66d501706ea199ab91c3b1a0da9b7f087e22cd675524c",
  "serverTime": "2025-06-29T11:55:03.109Z"
}



PROTECTED ENDPOINTS (Require JWT Token)
---------------------------------------

5. GET /map
-----------
Get the 3x3 local map view for the authenticated player plus current stats.

Headers:
Authorization: Bearer <jwt_token>

Example: GET /map

Response:
{
  "success": true,
  "player": "0x05937Df8ca0636505d92Fd769d303A3D461587ed",
  "localView": [
    [
      {"tile": 1, "player": false, "coordinates": {"x": 17, "y": 2}},
      {"tile": 1, "player": false, "coordinates": {"x": 18, "y": 2}}, 
      {"tile": 3, "player": false, "coordinates": {"x": 19, "y": 2}}
    ],
    [
      {"tile": 2, "player": false, "coordinates": {"x": 17, "y": 3}},
      {"tile": 1, "player": true, "coordinates": {"x": 18, "y": 3}},
      {"tile": 1, "player": false, "coordinates": {"x": 19, "y": 3}}
    ],
    [
      {"tile": 1, "player": false, "coordinates": {"x": 17, "y": 4}},
      {"tile": 1, "player": false, "coordinates": {"x": 18, "y": 4}},
      {"tile": 2, "player": false, "coordinates": {"x": 19, "y": 4}}
    ]
  ],
  "position": {"x": 18, "y": 3},
  "mapSize": 20,
  "score": 15,
  "movesRemaining": 8,
  "minesRemaining": 1,
  "legend": {
    "0": "Depleted (already mined)",
    "1": "Common (1 point)",
    "2": "Uncommon (5 points)",
    "3": "Rare (10 points)",
    "X": "Starting Position"
  }
}

Notes:
- localView is a 3x3 array with player at center [1][1]
- "player": true marks the player's current position
- coordinates show the actual map coordinates for each tile

6. POST /move
-------------
Move the authenticated player in a specified direction.

Headers:
Authorization: Bearer <jwt_token>

Request Body:
{
  "direction": "north|south|east|west|northeast|northwest|southeast|southwest"
}

Example: POST /move
Body: {"direction": "west"}

Response:
{
  "success": true,
  "player": "0x05937Df8ca0636505d92Fd769d303A3D461587ed",
  "direction": "west",
  "newPosition": {"x": 17, "y": 3},
  "tile": 2,
  "localView": [
    [
      {"tile": 1, "player": false, "coordinates": {"x": 16, "y": 2}},
      {"tile": 1, "player": false, "coordinates": {"x": 17, "y": 2}},
      {"tile": 1, "player": false, "coordinates": {"x": 18, "y": 2}}
    ],
    [
      {"tile": 1, "player": false, "coordinates": {"x": 16, "y": 3}},
      {"tile": 2, "player": true, "coordinates": {"x": 17, "y": 3}},
      {"tile": 1, "player": false, "coordinates": {"x": 18, "y": 3}}
    ],
    [
      {"tile": 1, "player": false, "coordinates": {"x": 16, "y": 4}},
      {"tile": 1, "player": false, "coordinates": {"x": 17, "y": 4}},
      {"tile": 1, "player": false, "coordinates": {"x": 18, "y": 4}}
    ]
  ],
  "score": 15,
  "movesRemaining": 7,
  "minesRemaining": 1,
  "validDirections": ["north", "south", "east", "west", "northeast", "northwest", "southeast", "southwest"]
}

Error Response (no moves remaining):
{
  "error": "No moves remaining"
}

Error Response (invalid direction):
{
  "error": "Invalid direction"
}

7. POST /mine
-------------
Mine at the authenticated player's current position to earn points.

Headers:
Authorization: Bearer <jwt_token>

Request Body: (empty - no parameters needed)
{}

Example: POST /mine

Response:
{
  "success": true,
  "player": "0x05937Df8ca0636505d92Fd769d303A3D461587ed",
  "position": {"x": 17, "y": 3},
  "tile": 2,
  "pointsEarned": 5,
  "totalScore": 20,
  "movesRemaining": 7,
  "minesRemaining": 0,
  "localView": [
    [
      {"tile": 1, "player": false, "coordinates": {"x": 16, "y": 2}},
      {"tile": 1, "player": false, "coordinates": {"x": 17, "y": 2}},
      {"tile": 1, "player": false, "coordinates": {"x": 18, "y": 2}}
    ],
    [
      {"tile": 1, "player": false, "coordinates": {"x": 16, "y": 3}},
      {"tile": 2, "player": true, "coordinates": {"x": 17, "y": 3}},
      {"tile": 1, "player": false, "coordinates": {"x": 18, "y": 3}}
    ],
    [
      {"tile": 1, "player": false, "coordinates": {"x": 16, "y": 4}},
      {"tile": 1, "player": false, "coordinates": {"x": 17, "y": 4}},
      {"tile": 1, "player": false, "coordinates": {"x": 18, "y": 4}}
    ]
  ]
}

Error Response (no mines remaining):
{
  "error": "No mines remaining"
}

Error Response (tile already mined):
{
  "error": "Tile already mined"
}

4. GET /players
---------------
Get all player positions, current tiles, and game stats.

Response:
{
  "success": true,
  "players": [
    {
      "address": "0x05937Df8ca0636505d92Fd769d303A3D461587ed",
      "position": {"x": 18, "y": 3},
      "tile": 2,
      "score": 15,
      "movesRemaining": 8,
      "minesRemaining": 1
    },
    {
      "address": "0x1a39C55e6333025A3Be3768873C846632ACDb6f5", 
      "position": {"x": 5, "y": 10},
      "tile": 1,
      "score": 3,
      "movesRemaining": 12,
      "minesRemaining": 3
    }
  ],
  "count": 2
}

GAME MECHANICS
==============
- Map is 20x20 grid (coordinates 0-19) with wrapping (edges connect)
- Players start at deterministic positions based on their address + reveal seed
- Players can move one square at a time in 8 directions (12 moves max)
- Players can mine their current tile for points (3 mines max)
- After mining, tiles become depleted (value 0) and cannot be mined again
- No collision detection between players
- Game ends when player exhausts moves and mines

ERROR HANDLING
==============
Movement Errors:
- No moves remaining: {"error": "No moves remaining"}
- Invalid direction: {"error": "Invalid direction"}
- Player not found: {"error": "Player not found"} (404 status)

Mining Errors:
- No mines remaining: {"error": "No mines remaining"}
- Tile already mined: {"error": "Tile already mined"}
- Player not found: {"error": "Player not found"} (404 status)

Authentication Errors:
- Missing token: {"error": "Access token required"} (401 status)
- Invalid token: {"error": "Invalid or expired token"} (403 status)
- Player not registered: {"error": "Player no longer registered"} (403 status)

SAMPLE CLIENT FLOW
==================
1. GET /status - Check if game is loaded
2. GET /register - Get the message to sign
3. Sign the message with your Ethereum wallet (e.g., MetaMask)
4. POST /register - Submit signature to get JWT token
5. GET /map - Get initial position and local view (with Authorization header)
6. POST /move - Make strategic moves based on what you see (max 12)
7. POST /mine - Mine valuable tiles for points (max 3 times)
8. Repeat steps 6-7 until moves/mines exhausted
9. GET /players - Check final scores and rankings

STRATEGY TIPS
=============
- Scout with moves to find rare tiles (worth 10 points each)
- Save mines for the most valuable tiles you can find
- Balance exploration vs mining - you only get 12 moves and 3 mines
- Common tiles (1 point) may not be worth mining unless you're sure
- Avoid mining tiles that are already depleted (value 0) - they give no points
- Coordinate with other players to avoid mining the same valuable tiles

AUTHENTICATION HEADERS
======================
For protected endpoints, include the Authorization header:
Authorization: Bearer <your_jwt_token>

Example with curl:
curl -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." http://localhost:8000/map

All responses include "success": true on successful operations. 