GAME API DOCUMENTATION
====================

Base URL: http://localhost:8000

OVERVIEW
--------
This is a dynamic grid-based exploration game where players move around a map with different land types.
The map size is calculated when the game is closed (after players join) and stored permanently in the smart contract.
Map size calculation: mapSize = 1 + (MAP_MULTIPLIER × actual_player_count), where MAP_MULTIPLIER = 4.
Examples: 1 player = 5×5 map, 2 players = 9×9 map, 3 players = 13×13 map, etc.
Each player has a deterministic starting position based on their wallet address + reveal seed.
Players can only see a 3x3 local view centered on their current position.

GAME FLOW
---------
1. Gamemaster commits hash → Game opens for players to join
2. Players join the game by staking ETH
3. Creator closes the game → Map size calculated based on actual players who joined
4. Game server starts with the calculated map size and generated map
5. Players have 90 seconds to explore and mine
6. Game ends, winners are paid out, hash is revealed

GAME CONSTRAINTS
----------------
- Each player has a maximum of 12 moves per game
- Each player can mine a maximum of 3 times per game
- Players accumulate score by mining on different land types
- Once moves or mines are exhausted, players cannot perform those actions
- Games have a 90-second timer - when time expires, all players' moves and mines are set to 0

SCORING SYSTEM
--------------
Land types have different point values when mined:
- Common land (1): 1 point
- Uncommon land (2): 5 points  
- Rare land (3): 10 points

AUTHENTICATION
--------------
The API uses JWT (JSON Web Token) authentication with Ethereum signature verification.
Players must sign a message with their wallet to get a JWT token that expires in 1 hour.
Protected endpoints require the Authorization header: "Bearer <token>"

LAND TYPES
----------
0 = Depleted land (already mined, 0 points)
1 = Common land (1 point when mined)
2 = Uncommon land (5 points when mined)
3 = Rare land (10 points when mined)
X = Starting position marker

MOVEMENT DIRECTIONS
------------------
Valid directions: north, south, east, west, northeast, northwest, southeast, southwest

TIMER MECHANICS
---------------
- Each game has a 90-second timer that starts when the game server initializes
- Timer information is included in most API responses as "timeRemaining" (seconds)
- Players receive warnings in server logs at 60, 30, 10, and 5 seconds remaining
- When timer expires, all players' moves and mines are automatically set to 0
- Game immediately ends and proceeds to payout phase
- Players cannot move or mine once timer expires - API returns "Time expired! Game over."

CONTRACT INTEGRATION
--------------------
- Map size is calculated and stored when the game is closed (after players join)
- This ensures the map size reflects the actual number of players who participated
- Frontend applications can get map size directly from the contract using:
  - contract.getMapSize(gameId) - returns the map size for a specific game
  - contract.getCommitRevealState(gameId) - returns mapSize as the 7th value
- The map size is only available after the game has been closed by the creator
- This ensures the map size is immutable and verifiable on-chain

API ENDPOINTS
=============

AUTHENTICATION ENDPOINTS
------------------------

5. GET /register
----------------
Get the message that needs to be signed for authentication.

Response:
{
  "success": true,
  "message": "Sign this message to authenticate with the game server.\n\nContract: 0x123...\nNamespace: ScriptGame\nTimestamp: 1234567890\n\nThis signature is valid for 5 minutes.",
  "timestamp": 1234567890,
  "instructions": "Sign this message with your Ethereum wallet to authenticate"
}

6. POST /register
-----------------
Submit the signature to get a JWT token.

Request Body:
{
  "signature": "0x1234567890abcdef...",
  "address": "0x05937Df8ca0636505d92Fd769d303A3D461587ed",
  "timestamp": 1234567890
}

Response (Success):
{
  "success": true,
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "expiresIn": "1h",
  "message": "Authentication successful"
}

Response (Error):
{
  "error": "Invalid signature"
}

PUBLIC ENDPOINTS
----------------

1. GET /
--------
Get basic server information and current game status.

Response:
{
  "success": true,
  "message": "Automated Game Server",
  "version": "2.0.0",
  "gameId": "12345",
  "activeGames": ["12345"],
  "serverStatus": "running",
  "playerCount": 3,
  "timestamp": "2025-06-29T11:55:03.109Z",
  "timer": {
    "active": true,
    "duration": 90,
    "timeRemaining": 73
  },
  "endpoints": {
    "register": "/register",
    "map": "/map (requires auth)",
    "move": "/move (requires auth)",
    "mine": "/mine (requires auth)",
    "status": "/status",
    "players": "/players",
    "test": "/test"
  }
}

2. GET /test
------------
Simple test endpoint to verify server is running.

Response:
{
  "success": true,
  "message": "Server is running!",
  "gameId": "12345",
  "timestamp": "2025-06-29T11:55:03.109Z",
  "gameLoaded": true,
  "playersCount": 2
}

3. GET /status
--------------
Get overall game status and server info, including timer information.

Response:
{
  "success": true,
  "gameId": "12345",
  "activeGames": ["12345"],
  "gameLoaded": true,
  "totalPlayers": 2,
  "players": ["0x05937Df8ca0636505d92Fd769d303A3D461587ed", "0x1a39C55e6333025A3Be3768873C846632ACDb6f5"],
  "serverTime": "2025-06-29T11:55:03.109Z",
  "timer": {
    "active": true,
    "duration": 90,
    "timeRemaining": 73,
    "timeElapsed": 17,
    "startTime": 1719657603109
  },
  "retryInfo": {},
  "gameStates": {
    "12345": {
      "phase": "GAME_RUNNING",
      "payoutSkipped": false,
      "playerCount": 2,
      "stakeAmount": 1000000000000000000,
      "hasOpened": true,
      "hasClosed": true,
      "hasCommitted": true,
      "hasRevealed": false,
      "hasPaidOut": false,
      "mapSize": 9
    }
  }
}

Note: mapSize is included in gameStates for debugging purposes when the game is closed. It will be 0 if the game hasn't been closed yet.

PROTECTED ENDPOINTS (Require JWT Token)
---------------------------------------

7. GET /map
-----------
Get the 3x3 local map view for the authenticated player plus current stats.

Headers:
Authorization: Bearer <jwt_token>

Example: GET /map

Response:
{
  "success": true,
  "player": "0x05937Df8ca0636505d92Fd769d303A3D461587ed",
  "localView": [
    [
      {"tile": 1, "player": false, "coordinates": {"x": 7, "y": 2}},
      {"tile": 1, "player": false, "coordinates": {"x": 8, "y": 2}}, 
      {"tile": 3, "player": false, "coordinates": {"x": 9, "y": 2}}
    ],
    [
      {"tile": 2, "player": false, "coordinates": {"x": 7, "y": 3}},
      {"tile": 1, "player": true, "coordinates": {"x": 8, "y": 3}},
      {"tile": 1, "player": false, "coordinates": {"x": 9, "y": 3}}
    ],
    [
      {"tile": 1, "player": false, "coordinates": {"x": 7, "y": 4}},
      {"tile": 1, "player": false, "coordinates": {"x": 8, "y": 4}},
      {"tile": 2, "player": false, "coordinates": {"x": 9, "y": 4}}
    ]
  ],
  "position": {"x": 8, "y": 3},
  "score": 15,
  "movesRemaining": 8,
  "minesRemaining": 1,
  "timeRemaining": 73,
  "legend": {
    "0": "Depleted (already mined)",
    "1": "Common (1 point)",
    "2": "Uncommon (5 points)",
    "3": "Rare (10 points)",
    "X": "Starting Position"
  }
}

Notes:
- localView is a 3x3 array with player at center [1][1]
- "player": true marks the player's current position
- coordinates show the actual map coordinates for each tile
- To get map size, use contract.getMapSize(gameId) or contract.getCommitRevealState(gameId) (only available after game is closed)

8. POST /move
-------------
Move the authenticated player in a specified direction.

Headers:
Authorization: Bearer <jwt_token>

Request Body:
{
  "direction": "north|south|east|west|northeast|northwest|southeast|southwest"
}

Example: POST /move
Body: {"direction": "west"}

Response:
{
  "success": true,
  "player": "0x05937Df8ca0636505d92Fd769d303A3D461587ed",
  "direction": "west",
  "newPosition": {"x": 7, "y": 3},
  "tile": 2,
  "localView": [
    [
      {"tile": 1, "player": false, "coordinates": {"x": 6, "y": 2}},
      {"tile": 1, "player": false, "coordinates": {"x": 7, "y": 2}},
      {"tile": 1, "player": false, "coordinates": {"x": 8, "y": 2}}
    ],
    [
      {"tile": 1, "player": false, "coordinates": {"x": 6, "y": 3}},
      {"tile": 2, "player": true, "coordinates": {"x": 7, "y": 3}},
      {"tile": 1, "player": false, "coordinates": {"x": 8, "y": 3}}
    ],
    [
      {"tile": 1, "player": false, "coordinates": {"x": 6, "y": 4}},
      {"tile": 1, "player": false, "coordinates": {"x": 7, "y": 4}},
      {"tile": 1, "player": false, "coordinates": {"x": 8, "y": 4}}
    ]
  ],
  "score": 15,
  "movesRemaining": 7,
  "minesRemaining": 1,
  "timeRemaining": 68,
  "validDirections": ["north", "south", "east", "west", "northeast", "northwest", "southeast", "southwest"]
}

Error Response (no moves remaining):
{
  "error": "No moves remaining"
}

Error Response (invalid direction):
{
  "error": "Invalid direction"
}

9. POST /mine
-------------
Mine at the authenticated player's current position to earn points.

Headers:
Authorization: Bearer <jwt_token>

Request Body: (empty - no parameters needed)
{}

Example: POST /mine

Response:
{
  "success": true,
  "player": "0x05937Df8ca0636505d92Fd769d303A3D461587ed",
  "position": {"x": 7, "y": 3},
  "tile": 2,
  "pointsEarned": 5,
  "totalScore": 20,
  "movesRemaining": 7,
  "minesRemaining": 0,
  "timeRemaining": 65,
  "localView": [
    [
      {"tile": 1, "player": false, "coordinates": {"x": 6, "y": 2}},
      {"tile": 1, "player": false, "coordinates": {"x": 7, "y": 2}},
      {"tile": 1, "player": false, "coordinates": {"x": 8, "y": 2}}
    ],
    [
      {"tile": 1, "player": false, "coordinates": {"x": 6, "y": 3}},
      {"tile": 2, "player": true, "coordinates": {"x": 7, "y": 3}},
      {"tile": 1, "player": false, "coordinates": {"x": 8, "y": 3}}
    ],
    [
      {"tile": 1, "player": false, "coordinates": {"x": 6, "y": 4}},
      {"tile": 1, "player": false, "coordinates": {"x": 7, "y": 4}},
      {"tile": 1, "player": false, "coordinates": {"x": 8, "y": 4}}
    ]
  ]
}

Error Response (no mines remaining):
{
  "error": "No mines remaining"
}

Error Response (tile already mined):
{
  "error": "Tile already mined"
}

10. GET /players
---------------
Get all player game stats (no position or tile information for fair play).

Response:
{
  "success": true,
  "gameId": "12345",
  "players": [
    {
      "address": "0x05937Df8ca0636505d92Fd769d303A3D461587ed",
      "score": 15,
      "movesRemaining": 8,
      "minesRemaining": 1
    },
    {
      "address": "0x1a39C55e6333025A3Be3768873C846632ACDb6f5", 
      "score": 3,
      "movesRemaining": 12,
      "minesRemaining": 3
    }
  ],
  "count": 2,
  "timeRemaining": 58
}

GAME MECHANICS
==============
- Map size is calculated when game is closed: mapSize = 1 + (MAP_MULTIPLIER × actual_player_count)
- MAP_MULTIPLIER = 4, so: 1 player = 5×5 map, 2 players = 9×9 map, 3 players = 13×13 map
- Map size is stored permanently in the smart contract when the game is closed and can be retrieved using:
  - contract.getMapSize(gameId) - returns uint256 map size (only available after game is closed)
  - contract.getCommitRevealState(gameId) - returns mapSize as 7th return value (only available after game is closed)
- Coordinates range from 0 to (mapSize-1) with wrapping (edges connect to opposite side)
- Players start at deterministic positions based on their address + reveal seed
- Players can move one square at a time in 8 directions (12 moves max)
- Players can mine their current tile for points (3 mines max)
- After mining, tiles become depleted (value 0) and cannot be mined again
- No collision detection between players
- 90-second timer starts when game server initializes
- Timer warnings logged at 60, 30, 10, and 5 seconds remaining
- When timer expires, all players' moves and mines are set to 0
- Game ends when player exhausts moves and mines OR timer expires

ERROR HANDLING
==============
Movement Errors:
- No moves remaining: {"error": "No moves remaining"}
- Invalid direction: {"error": "Invalid direction"}
- Player not found: {"error": "Player not found"} (404 status)
- Timer expired: {"error": "Time expired! Game over."} (400 status)

Mining Errors:
- No mines remaining: {"error": "No mines remaining"}
- Tile already mined: {"error": "Tile already mined"}
- Player not found: {"error": "Player not found"} (404 status)
- Timer expired: {"error": "Time expired! Game over."} (400 status)

Authentication Errors:
- Missing token: {"error": "Access token required"} (401 status)
- Invalid token: {"error": "Invalid or expired token"} (403 status)
- Player not registered: {"error": "Player no longer registered"} (403 status)

SAMPLE CLIENT FLOW
==================
1. GET /status - Check if game is loaded and see timer status
2. Check contract.getGameInfo(gameId) to see if game is closed, then call contract.getMapSize(gameId) - Get map size from contract (only available after game is closed)
3. GET /register - Get the message to sign
4. Sign the message with your Ethereum wallet (e.g., MetaMask)
5. POST /register - Submit signature to get JWT token
6. GET /map - Get initial position and local view (with Authorization header)
7. Monitor timeRemaining in all API responses to track time left
8. POST /move - Make strategic moves based on what you see (max 12)
9. POST /mine - Mine valuable tiles for points (max 3 times)
10. Repeat steps 8-9 until moves/mines exhausted OR timer expires
11. GET /players - Check final scores and rankings

STRATEGY TIPS
=============
- Map size is fixed per game and stored in contract - check it before playing
- Smaller maps (fewer players) = more intense competition for tiles
- Larger maps (more players) = more room to explore but more competition
- Scout with moves to find rare tiles (worth 10 points each)
- Save mines for the most valuable tiles you can find
- Balance exploration vs mining - you only get 12 moves and 3 mines
- Common tiles (1 point) may not be worth mining unless you're sure
- Avoid mining tiles that are already depleted (value 0) - they give no points
- Work fast! You only have 90 seconds before the timer expires
- Monitor timeRemaining in API responses to track how much time is left
- Consider nearby tiles over distant exploration when time is running low
- Mine valuable tiles immediately when found - don't wait for "perfect" strategy

AUTHENTICATION HEADERS
======================
For protected endpoints, include the Authorization header:
Authorization: Bearer <your_jwt_token>

Example with curl:
curl -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." http://localhost:8000/map

All responses include "success": true on successful operations.

CONTRACT FUNCTIONS FOR MAP SIZE
===============================
Frontend applications should use these contract functions to get map size:

// Get map size for a specific game (only available after game is closed)
const mapSize = await contract.getMapSize(gameId);

// Get map size along with other commit/reveal state (only available after game is closed)
const [
  committedHash,
  commitBlockNumber, 
  revealValue,
  randomHash,
  hasCommitted,
  hasRevealed,
  mapSize
] = await contract.getCommitRevealState(gameId);

// Check if game is closed before getting map size:
const [gamemaster, creator, stakeAmount, open, playerCount, hasOpened, hasClosed] = await contract.getGameInfo(gameId);

if (hasClosed) {
  const mapSize = await contract.getMapSize(gameId);
  console.log(`Game ${gameId} uses a ${mapSize}x${mapSize} map`);
} else {
  console.log(`Game ${gameId} is still open for players to join. Map size will be calculated when closed.`);
}

